plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modApi "net.blay09.mods:balm-fabric:${project.balm_version}+${project.minecraft_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    var replaceProperties = [
            mod_id               : mod_id,
            mod_version          : mod_version,
            mod_name             : mod_name,
            mod_description      : mod_description,
            mod_author           : mod_author,
            mod_license          : mod_license,
            mod_icon             : mod_icon,
            minecraft_version    : minecraft_version,
            fabric_loader_version: fabric_loader_version,
            fabric_api_version   : fabric_api_version,
            balm_version         : balm_version
    ]
    inputs.properties replaceProperties

    filesMatching('fabric.mod.json') {
        expand replaceProperties
    }
}

shadowJar {
    exclude '.cache/**'
    from project(':').file('LICENSE.md')

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}